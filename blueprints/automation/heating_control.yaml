blueprint:
  name: 'Heating Control'
  description: 'Automatic heating based on a scheduler, presence of people and optional dependencies such as window opening. Optional calibration using a separate temperature sensor.
    Presence-detection is only used for ad.adjusting the temperature.
    - helper-dropdown hast to contain auto|heat|off to control the general behaviour
    - three temperatures comfort, away, min
    - auto & presence: scheduler, comfort/min temp
    - auto & away: scheduler, away/min temp
    - heat: comfort temp
    This blueprint was Forked from panahns'
  source_url: 'https://github.com/clemensao/homeassistant/blob/main/blueprints/automation/heating_control.yaml'
  domain: automation
  input:
  
    heating:
      name: 'Thermostats / Valves'
      description: 'Thermostats to be controlled'
      selector:
        entity:
          domain: climate
          multiple: true
          
    min_temp:
      name: 'Minimum Temp'
      description: 'If no one is at home, the minimum temperature is set.'
      default: 18
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          mode: slider
          
    set_temp:
      name: 'Comfort temperature'
      description: 'If someone is at home, the comfort temperature is set.'
      default: 20
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          mode: slider
          
    persons:
      name: 'Persons'
      description: 'If a person is at home, the comfort temperature is set.'
      selector:
        entity:
          domain: person
          multiple: true
        
    scheduler:
      name: 'Scheduler'
      description: 'Scheduler that specifies when the comfort temperature can be set. Scheduler can be added in the helpers section in your home assistant settings.'
      selector:
        entity:
          domain: schedule
          multiple: false
          
    window:
      name: 'Window (optional)'
      description: 'Window that turns off the thermostats if it is open.'
      default:
      selector:
        entity:
          domain: binary_sensor
          
    window_open_delay:
      name: 'Window reaction time'
      description: 'Duration that the window must be open for the thermostats to be turned off.'
      default: 15
      selector:
        number:
          min: 0
          max: 60
          step: 1
          mode: slider
          
    window_close_delay:
      name: 'Window close delay'
      description: 'Duration that the window must be closed for the thermostats to resume.'
      default: 60
      selector:
        number:
          min: 0
          max: 120
          step: 1
          mode: slider
          
    winter_mode:
      name: 'Wintertime (optional)'
      description: 'If this input boolean is off, heating will never occur.'
      default:
      selector:
        entity:
          domain: input_boolean
          
    heat_mode:
      name: 'Heat mode (optional)'
      description: 'Overwrites winter mode and scheduler. If on, heating is activated.'
      default:
      selector:
        entity:
          domain: input_boolean
          
    external_temp_sensor:
      name: 'External Temperatur Sensor (optional)'
      description: 'Set this if you want temperature calibration for your thermostat. Be sure your valve has a calibration number entity that has thw word "calibration" included in its id.'
      default:
      selector:
        entity:
          domain: sensor
          device_class: temperature

variables:
  trvs: !input 'heating'
  valves: "{{ expand(trvs) | map(attribute='entity_id') | list }}"
  set_temp: !input 'set_temp'
  min_temp: !input 'min_temp'
  scheduler: !input 'scheduler'
  window: !input 'window'
  winter_mode: !input 'winter_mode'
  heat_mode: !input 'heat_mode'
  persons: !input 'persons'

  party_state: "{{ heat_mode != none and is_state(heat_mode, 'on') }}"
  winter_state: "{{ winter_mode == none or is_state(winter_mode, 'on') }}"
  window_state: "{{ window != none and is_state(window, 'on') }}"
  mode_change_wait: 2
  mode: >
    {% if (winter_state == true or party_state == true) and window_state == false %}
      auto
    {% else %}
      off
    {% endif %}
  persons_home_count: "{{ expand(persons) | selectattr('state', 'eq', 'home') | list | count }}"
  
  temperatur: >
    {% if ((states(scheduler) == 'on' or party_state == true) and persons_home_count | int > 0 ) %}
      {{ set_temp }}
    {% else %}
      {{ min_temp }}
    {% endif %}
    
  actual_local_temperature: !input 'external_temp_sensor'
  
trigger_variables:
  window_t: !input window
  winter_mode_t: !input winter_mode
  heat_mode_t: !input heat_mode
  actual_local_temperature_t: !input 'external_temp_sensor'
#  temperature_changed_t: "{{ actual_local_temperature_t != none and (as_timestamp(now()) - as_timestamp(states[actual_local_temperature_t].last_updated)) > 60  }}"

trigger:
  # home assistant events
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded
  # schedule state changes
  - platform: state
    entity_id: !input 'scheduler'
  # peoples presence changes
  - platform: state
    entity_id: !input 'persons'
  # window open
  - platform: template
    value_template: >-
       {{ window_t != none and is_state(window_t, 'on') }}
    for:
      seconds: !input 'window_open_delay'
  # window closes
  - platform: template
    value_template: >-
       {{ window_t != none and is_state(window_t, 'off') }}
    for:
      seconds: !input 'window_close_delay'
  # winter_mode changes    
  - platform: template
    value_template: >-
       {{ winter_mode_t != none and is_state(winter_mode_t, 'on') }}
    for:
      seconds: mode_change_wait
  - platform: template
    value_template: >-
       {{ winter_mode_t != none and is_state(winter_mode_t, 'off') }}
    for:
      seconds: mode_change_wait
  # heat mode changes    
  - platform: template
    value_template: >-
       {{ heat_mode_t != none and is_state(heat_mode_t, 'on') }}
    for:
      seconds: mode_change_wait
  - platform: template
    value_template: >-
       {{ heat_mode_t != none and is_state(heat_mode_t, 'off') }}
    for:
      seconds: mode_change_wait
  # every 10 minutes 
  - platform: time_pattern
    minutes: "/10"
    
action:
  #################################
  # Claibration
  #################################
  - if:
    - condition: template
      value_template: "{{ trigger.platform == 'time_pattern' }}"
    - condition: template
      value_template: "{{ actual_local_temperature != none }}"
    then:
    - repeat:
        count: "{{ valves | count | int }}"
        sequence:              
        - service: number.set_value
          data:
            value: >
              {% set current_valve = valves[repeat.index-1] %}

              {% set calibration_entity_id = namespace(id=[]) %}
              {% set entities =  device_entities(device_id(current_valve)) %} 
              {% for s in entities %}
                {% if 'calibration' in s %}
                  {% set calibration_entity_id.id = s %}
                {% endif %}
              {% endfor %}

              {% set current_calibration_value = states[calibration_entity_id.id].state %}
              {% set step = states[calibration_entity_id.id].attributes.step %}

              {% set local_temperature = states[current_valve].attributes.current_temperature %}
              {% set actual_trv_temperature = (local_temperature | float(0) - current_calibration_value | float(0)) | round(1) %}
              {% set actual_sensor_temperature = states[actual_local_temperature].state | float(0) | round(1) %}
              {% set new_calibration_value =  actual_sensor_temperature - actual_trv_temperature %}

              {% set min_calibration_value = states[calibration_entity_id.id].attributes.min  %}
              {% set max_calibration_value = states[calibration_entity_id.id].attributes.max  %}
              {% if(new_calibration_value > max_calibration_value) %}
                {% set new_calibration_value = max_calibration_value %}
              {% elif (new_calibration_value < min_calibration_value)  %}
                {% set new_calibration_value = min_calibration_value %}
              {% endif %}

              {{ (new_calibration_value | float(0) / step) | round(0) * step }}
          target:
            entity_id: >
              {% set entities =  device_entities(device_id(valves[repeat.index-1])) %} 
              {% for s in entities %}
                {% if 'calibration' in s %}
                  {{ s }}
                {% endif %}
              {% endfor %}
    else:
    - service: climate.set_hvac_mode
      target:
        entity_id: !input 'heating'
      data:
        hvac_mode: "{{ mode }}"

    - condition: template
      value_template: "{{ mode == 'auto' }}"
    - delay: 3
    - service: climate.set_temperature
      data:
        entity_id: !input 'heating'
        temperature: "{{ temperatur | float }}"
          
mode: restart
