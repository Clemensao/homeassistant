blueprint:
  name: 'Heating Control'
  description: 'Automatic heating based on a scheduler, presence of people 
    and optional dependencies such as window opening, temperature calibration using a separate temperature sensor (only when valve position < 10%).
    Presence-detection is only used for adjusting the temperature. Comfort- and Minimum-temperature.
    The temperature only changes when Scheduler or Presence change, also on restart! (So meanwhile you can dial the thermostat manually) <br />
    NEW: Adding a "work from home" helper can enable or disable the scheduler<br />
    Temperatur-assignment:
    <ul>
    <li>Wintertime & Presence: scheduler ? comfort : min</li>
    <li>Wintertime & Away: scheduler  ? away/min : min</li>
    <li>Heat mode: comfort temp</li>
    </ul>
    <p>
    Device specific bahaviour:
      Tado: "heat"-mode is used beacause in "auto" mode Tado uses its own schedules
    </p>'
  source_url: 'https://github.com/clemensao/homeassistant/blob/main/blueprints/automation/heating_control.yaml'
  domain: automation
  input:
  
    heating:
      name: 'Thermostats / Valves'
      description: 'Thermostats to be controlled'
      selector:
        entity:
          domain: climate
          multiple: true
          
    min_temp:
      name: 'Minimum Temp'
      description: 'If no one is at home, the minimum temperature is set.'
      default: 18
      selector:
        number:
          min: 5
          max: 25
          step: 0.5
          mode: slider

    min_temp_input:
      name: 'Minimum Temp taken from an input (optional)'
      description: 'If no one is at home, the minimum temperature is set by a helper number input (optional).'
      default:
      selector:
        entity:
          domain: input_number
          
    set_temp:
      name: 'Comfort temperature'
      description: 'If someone is at home, the comfort temperature is set.'
      default: 20
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          mode: slider
          
    persons:
      name: 'Persons'
      description: 'If a person is at home, the comfort temperature is set.'
      selector:
        entity:
          domain: 
            - person
            - device_tracker
          multiple: true
        
    scheduler:
      name: 'Scheduler'
      description: 'Scheduler that specifies when the comfort temperature can be set. Scheduler can be added in the helpers section in your home assistant settings.'
      selector:
        entity:
          domain: schedule
          multiple: false
    
    home_office:
      name: 'Working at home (optional)'
      description: 'If true, use scheduler, if no then we set to min temperature (optional).'
      default:
      selector:
        entity:
          domain: input_boolean
          
    window:
      name: 'Window (optional)'
      description: 'Window that turns off the thermostats if it is open.'
      default:
      selector:
        entity:
          domain: binary_sensor
          
    window_open_delay:
      name: 'Window reaction time'
      description: 'Duration that the window must be open for the thermostats to be turned off.'
      default: 15
      selector:
        number:
          min: 0
          max: 60
          step: 1
          mode: slider
          
    window_close_delay:
      name: 'Window close delay'
      description: 'Duration that the window must be closed for the thermostats to resume.'
      default: 60
      selector:
        number:
          min: 0
          max: 120
          step: 1
          mode: slider
          
    winter_mode:
      name: 'Wintertime (optional)'
      description: 'If this input boolean is off, heating will never occur.'
      default:
      selector:
        entity:
          domain: input_boolean
          
    heat_mode:
      name: 'Heat mode (optional)'
      description: 'Overwrites winter mode and scheduler. If on, heating is activated.'
      default:
      selector:
        entity:
          domain: input_boolean
          
    external_temp_sensor:
      name: 'External Temperatur Sensor (optional)'
      description: 'Set this if you want temperature calibration for your thermostat. Be sure your valve has a calibration number entity that has thw word "calibration" included in its id.'
      default:
      selector:
        entity:
          domain: sensor
          device_class: temperature

    moisture_threshold:
      name: 'Humidity Threshold (optional)'
      description: 'A threshold helper reflecting Humidity can be added. If on (humid) it overrides scheduler and presence'
      default:
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture

variables:
  trvs: !input 'heating'
  valves: "{{ expand(trvs) | map(attribute='entity_id') | list }}"
  set_temp: !input 'set_temp'
  min_temp: !input 'min_temp'
  min_temp_input: !input 'min_temp_input'
  scheduler: !input 'scheduler'
  home_office: !input 'home_office'
  window: !input 'window'
  winter_mode: !input 'winter_mode'
  heat_mode: !input 'heat_mode'
  persons: !input 'persons'
  moisture_sensor: !input 'moisture_threshold'
  moisture_flag: "{{ moisture_sensor != none and is_state(moisture_sensor,'on') }}"

  party_state: "{{ heat_mode != none and is_state(heat_mode, 'on') }}"
  winter_state: "{{ winter_mode == none or is_state(winter_mode, 'on') }}"
  window_state: "{{ window != none and is_state(window, 'on') }}"
  homeoffice_state: "{{ home_office == none or (home_office != none and is_state(home_office, 'on')) }}"
  mode: >
    {% if (winter_state == true or party_state == true) and window_state == false %}
      auto
    {% else %}
      off
    {% endif %}
  persons_home_count: "{{ expand(persons) | selectattr('state', 'eq', 'home') | list | count }}"
  
  temperatur: >
    {% if ((((states(scheduler) == 'on' and homeoffice_state == true) or party_state == true) and persons_home_count | int > 0 ) or moisture_flag == true) %}
      {{ set_temp }}
    {% else %}
      {% if min_temp_input != none %}
        {{ states(min_temp_input) }}
      {% else %}
        {{ min_temp }}
      {% endif %}
    {% endif %}
    
  external_temp_sensor: !input 'external_temp_sensor'
  
trigger_variables:
  window_t: !input window
  winter_mode_t: !input winter_mode
  heat_mode_t: !input heat_mode
  moisture_t: !input 'moisture_threshold'
# temperature_changed_t: "{{ external_temp_sensor != none and (as_timestamp(now()) - as_timestamp(states[external_temp_sensor].last_updated)) > 60  }}"

trigger:
  # home assistant eventsexternal_temp_sensor
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded
  # schedule state changes
  - platform: state
    entity_id: !input 'scheduler'
    id: schedule
  # peoples presence changes
  - platform: state
    entity_id: !input 'persons'
    from: 'home'
    to: 'not_home'
    id: presence
  - platform: state
    entity_id: !input 'persons'
    from: 'not_home'
    to: 'home'
    id: presence
  # window open
  - platform: template
    value_template: >-
       {{ window_t != none and is_state(window_t, 'on') }}
    for:
      seconds: !input 'window_open_delay'
  # window closes
  - platform: template
    value_template: >-
       {{ window_t != none and is_state(window_t, 'off') }}
    for:
      seconds: !input 'window_close_delay'
  # moisture threshold
  - platform: template
    value_template: >-
       {{ moisture_t != none and is_state(moisture_t, 'on') }}
    for:
      seconds: !input 'window_open_delay'
    id: moisture
  - platform: template
    value_template: >-
       {{ moisture_t != none and is_state(moisture_t, 'off') }}
    for:
      seconds: !input 'window_close_delay'
    id: moisture  
  # winter_mode changes    
  - platform: template
    value_template: >-
       {{ winter_mode_t != none and is_state(winter_mode_t, 'on') }}
    for:
      seconds: 2
    id: winter
  - platform: template
    value_template: >-
       {{ winter_mode_t != none and is_state(winter_mode_t, 'off') }}
    for:
      seconds: 2
    id: winter
  # heat mode changes    
  - platform: template
    value_template: >-
       {{ heat_mode_t != none and is_state(heat_mode_t, 'on') }}
    for:
      seconds: 2
    id: 'heat'
  - platform: template
    value_template: >-
       {{ heat_mode_t != none and is_state(heat_mode_t, 'off') }}
    for:
      seconds: 2
    id: 'heat'
  # every 10 minutes 
  #- platform: time_pattern
  #  minutes: "/10"
    
action:
  #################################
  # Calibration
  #################################
  - if:
    - condition: template
      value_template: "{{ trigger.platform == 'time_pattern' }}"
    - condition: template
      value_template: "{{ external_temp_sensor != none }}"
    then:
    - repeat:
        count: "{{ valves | count | int }}"
        sequence:    
        - alias: "Check valve position"
          condition: template
          value_template: >
            {% set valve_position = namespace(rate=[]) %}
            {% for s in entities %}
              {% if 'heating' in s or 'position' in s %}
                {% set valve_position.rate = states(s)|default(0)|float  %}
              {% endif %}
            {% endfor %}
            {{ valve_position.rate < 10 }}  
        - service: system_log.write
          data:
            message: >
              Using {{ external_temp_sensor }} to calibrate {{ trvs }}
            level: debug
            logger: blueprints.heating_control        
        - service: number.set_value
          data:
            value: >
              {% set current_valve = valves[repeat.index-1] %}
              {% set calibration_entity_id = namespace(id=[]) %}
              {% set entities =  device_entities(device_id(current_valve)) %} 
              {% for s in entities %}
                {% if 'calibration' in s %}
                  {% set calibration_entity_id.id = s %}
                {% endif %}
              {% endfor %}
              {% set current_calibration_value = states[calibration_entity_id.id].state %}
              {% set step = states[calibration_entity_id.id].attributes.step %}

              {% set local_temperature = states[current_valve].attributes.current_temperature %}
              {% set actual_trv_temperature = (local_temperature | float(0) - current_calibration_value | float(0)) | round(1) %}
              {% set actual_sensor_temperature = states[external_temp_sensor].state | float(0) | round(1) %}
              {% set new_calibration_value =  actual_sensor_temperature - actual_trv_temperature %}

              {% set min_calibration_value = states[calibration_entity_id.id].attributes.min  %}
              {% set max_calibration_value = states[calibration_entity_id.id].attributes.max  %}
              {% if(new_calibration_value > max_calibration_value) %}
                {% set new_calibration_value = max_calibration_value %}
              {% elif (new_calibration_value < min_calibration_value)  %}
                {% set new_calibration_value = min_calibration_value %}
              {% endif %}

              {{ (new_calibration_value | float(0) / step) | round(0) * step }}
          target:
            entity_id: >
              {% set entities =  device_entities(device_id(valves[repeat.index-1])) %} 
              {% for s in entities %}
                {% if 'calibration' in s %}
                  {{ s }}
                {% endif %}
              {% endfor %}
    else:
    - repeat:
        count: "{{ valves | count | int }}"
        sequence:              
        - service: climate.set_hvac_mode
          target:
            entity_id: >
              {{ valves[repeat.index-1] }}
          data:
            # set Tado devices to heat, otherwise the internal scheduler would be taken
            hvac_mode: >
              {% set current_valve = valves[repeat.index-1] %}
              {% set manufacturer = device_attr(device_id(current_valve),'manufacturer') %}
              {% if (manufacturer == 'Tado' and mode != 'off') %}
                {{ "heat" }}
              {% else %}
                {{ mode }}
              {% endif %}
        - condition: and
          conditions:
            - condition: template
              value_template: "{{ mode in ['auto','heat'] }}"
            - or:
                - condition: template
                  value_template: "{{ trigger.platform in ['state','homeassistant','event'] }}"
                - condition: template
                  value_template: "{{ trigger.id in ['heat','winter','schedule','presence','moisture'] }}"
        - delay: 3
        - service: climate.set_temperature
          data:
            entity_id: !input 'heating'
            temperature: "{{ temperatur | float }}"
          
mode: restart
